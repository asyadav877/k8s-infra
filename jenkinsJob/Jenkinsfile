pipeline {
    agent any
    stages {
        stage('Checkout Repo'){
            steps{
                sh 'echo   "Not checking out the repo since already inside that repo"'
                sh 'ls -la'
            }
        }

        stage('Write to File') {
            steps {
                dir("automatedTerraform/resource/${resource}"){
                    script {
                        def content = params.tfvars
                        writeFile file: "terraform.tfvars", text: content
                    }
                    sh "cat terraform.tfvars"
                }
                

                
            }
        }

        stage('Initialising the terraform'){
            steps {
                dir("automatedTerraform/resource/${resource}"){
                    sh '/usr/local/bin/terraform init -reconfigure -no-color'
                }

            }
        }

        stage('Planning the terraforn resource'){
            steps {
                dir("automatedTerraform/resource/${resource}"){
                    sh '/usr/local/bin/terraform plan -no-color' 
                }

            }
        }

        stage('Proceed to create or delete the resource'){
            steps{
                script {
                    def userInput = input(
                        id: 'confirm',
                        message: "Proceed to ${action} the resource",
                        parameters: [
                            [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Proceed to create?', name: 'PROCEED']
                        ]
                    )
                    if (userInput == false) {
                        error('Pipeline aborted by user')
                    }
                    else{
                        dir("automatedTerraform/resource/${resource}"){
                            sh "/usr/local/bin/terraform ${action} --auto-approve -no-color"
                        }
                    }
                }
            }
        }
        stage('Clean Workspace') {
            steps {
                // Clean the workspace
                deleteDir()
            }
        }
    }
}
